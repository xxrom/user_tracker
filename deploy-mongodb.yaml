apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-mongodb # random name
  namespace: user-tracker
  labels:
    app: mongodb # random name
spec:
  replicas: 1 # 1 Only one replicas for now, if more then use StatefulSet !!!!
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: secret-mongodb
                  key: mongodb-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secret-mongodb
                  key: mongodb-password
          readinessProbe:
            exec:
              command:
              - bash
              - "-c"
              - |
                mongosh --eval "db.adminCommand('ping')"
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 20
            successThreshold: 1
          volumeMounts:
          - name: mongo-data
            mountPath: /data/db # where to store mongo data files
      volumes:
      - name: mongo-data
        persistentVolumeClaim:
          claimName: nfs-pvc # nfs PVC name to use

---
apiVersion: v1
kind: Service
metadata:
  name: service-mongodb # random name
  namespace: user-tracker
spec:
  selector:
    app: mongodb # selector from actual pod labels => app
  ports:
    - protocol: TCP
      port: 27017 # service port
      targetPort: 27017 # containerPort from pod
